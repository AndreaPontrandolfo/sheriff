export interface NoRestrictedSyntaxSlice {
  selector: string;
  message: string;
}

export interface Entry {
  ruleName: string;
  parentPluginName: string;
  severity: NumericSeverity;
  ruleOptions: RuleOptionsConfig;
  affectedFiles: string;
  docs: {
    description: string;
    url: string;
  };
}

export type NumericSeverity = 0 | 1 | 2;

export type Severity = NumericSeverity | 'error' | 'warn' | 'off';

export type RuleOptions =
  | [Severity, ...(Record<string, unknown> | string)[]]
  | Severity;

export type Plugins =
  | {
      [key: string]:
        | {
            files?: string[];
            rules: any;
            configs?: any;
          }
        | undefined;
    }
  | null
  | undefined;

export interface BarebonesConfigAtom {
  rules?: Record<string, RuleOptions> | undefined;
  plugins?: Plugins;
  files?: string[] | undefined;
}

export interface ExportableConfigAtom {
  rules?: Record<string, any>;
  plugins?: Plugins;
  files?: string[];
  languageOptions?: Record<string, unknown>;
  settings?: Record<string, unknown>;
  ignores?: string[];
}

export type RuleOptionsConfig = (Record<string, any> | string)[];

export interface SheriffConfigurablePlugins {
  /**
   * React support.
   */
  react: boolean;
  /**
   * Lodash support.
   */
  lodash: boolean;
  /**
   * Nextjs support.
   */
  next: boolean;
  /**
   * Astro support.
   */
  astro: boolean;
  /**
   * Playwright support.
   */
  playwright: boolean;
  /**
   * Jest support. Select this or vitest, not both.
   */
  jest: boolean;
  /**
   * Vitest support. Select this or jest, not both.
   */
  vitest: boolean;
}

export interface SheriffSettings extends Partial<SheriffConfigurablePlugins> {
  /**
   * This parameter allows you to override the paths for some Sheriff settings.
   */
  pathsOverrides?: {
    /**
     * This setting overrides the default Sheriff filepaths for test files. It accepts an array of filepaths, dictaced by minimatch syntax. Sheriff will apply Jest or Vitest rules only on these files.
     */
    tests?: string[];
  };
  /**
   * This setting apply some ignore patterns to the whole config.
   */
  ignores?: {
    /**
     * Some commonly ignored folders.
     */
    recommended?: boolean;
    /**
     * With this setting, Sheriff will ignore all the files that are currently ignored by git. Chances are that if you are ignoring a file in git, you don't want to lint it, which usually is the case with temporary and autogenerated files.
     */
    inheritedFromGitignore?: boolean;
  };
  /**
   * This setting accepts an array of filepaths, dictaced by minimatch syntax. Only the matching files found in this array will be linted. All other files will be ignored. This is useful if you want to lint only a subset of your project.
   */
  files?: string[];
  /**
   * `projectService` is enabled by default. If for whatever reason `projectService` is causing you issues, you can disable it.
   * For example, if you want to just use the legacy `project` option.
   * See https://typescript-eslint.io/packages/parser/#projectservice.
   *
   * WARNING: disabling `projectService` is extremely discouraged, as the entire linting will probably break.
   * At the very least, you should enable the `project` option as an alternative.
   */
  disableProjectService?: boolean;
}

export interface ServerResponse {
  compiledConfig: Entry[];
  pluginsNames: string[];
  totalAvailableRulesAmount?: number;
}
